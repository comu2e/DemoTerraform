on:
  push:
    branches:
      - master
      - develop

env:
  AWS_REGION: ap-northeast-1
  APP_NAME: ${{ github.event.repository.name }}
  AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/awscreds

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prodcution
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS
        run: |
          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/${{env.APP_NAME}}-github-actions >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_REGION >> $GITHUB_ENV
          curl --silent -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=sigstore" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_APP: ${{ env.APP_NAME }}-app
          ECR_REPOSITORY_NGINX: ${{ env.APP_NAME }}-nginx
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG -f .docker/nginx/prod.Dockerfile ./
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG -f .docker/app/prod.Dockerfile ./
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG"
      # Rewrite task-definition
      - name: rewrite task-definition
        run:
          sed -i -e s/SED_TARGET_AWS_ACCOUNT_ID/${{ secrets.AWS_ACCOUNT_ID }}/g .aws/ecs/migration-task-definition.json &&
          sed -i -e s/SED_TARGET_AWS_ACCOUNT_ID/${{ secrets.AWS_ACCOUNT_ID }}/g .aws/ecs/task-definition.json &&
          sed -i -e s/SED_TARGET_APP_NAME/${{ env.APP_NAME }}/g .aws/ecs/task-definition.json &&
          sed -i -e s/SED_TARGET_REGION/${{ env.AWS_REGION }}/g .aws/ecs/task-definition.json

      # # Migration
      # - name: migration task def
      #   id: migration-task-def
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: .aws/ecs/migration-task-definition.json
      #     cluster: ${{ env.APP_NAME }}

      # - name: migrate
      #   run: aws ecs run-task
      #     --launch-type FARGATE
      #     --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNETS }}], securityGroups=[${{ secrets.SECURITY_GROUPS }}], assignPublicIp=ENABLED}"
      #     --cluster ${{ env.APP_NAME }}
      #     --task-definition ${{ steps.migration-task-def.outputs.task-definition-arn }}

      # Deploy
      - name: Render Amazon ECS task definition for first container
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/ecs/task-definition.json
          container-name: nginx
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/${{ env.APP_NAME }}-nginx:latest

      - name: Modify Amazon ECS task definition with second container
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          container-name: app
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/${{ env.APP_NAME }}-app:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          service: ${{ env.APP_NAME }}-nginx
          cluster: ${{ env.APP_NAME }}
          wait-for-service-stability: true